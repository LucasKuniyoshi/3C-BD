docker compose up --build
docker compose up --build -d (segundo plano)
docker compose stop (para ele parar)

localhost:8087 (PHP_BD)
localhost:3306

admin : root
senha : root

os "scrip.sql" vão na aba importar e devem estar na mesma pasta

===================================

            MODELAGEM

===================================

CREATE DATABASE testecriacao;
SELECT * FROM servicos;

SHOW DATABASES (mostra todos os databases)

DROP DATABASE teste (deleta o banco teste)

EXPORTANDO BANCO:
mysqldump -u root empresa > empresa2.sql

CRIANDO TABELAS:
CREATE TABLE <nome> (<coluna> <tipo de dado>)
CREATE TABLE pessoas (nome VARCHAR(100); cpf CHAR(11); descricao MEDUIMTEXT) //CHAR(11) "11 => delimita o tamanho da string"

TIPOS DE DADOS:
VARCHAR (strings grandes, 0 - 65535 caracteres) "Nome, descricao";
CHAR (strings pequenas, 0 - 255 caracteres) "cpf, cargo";
BIT (1 A 64 caracteres);
TINYTEXT (reserva espaço em bits na memória, texto até 255 caracteres);
BOOL (0 é falso e outros valores são verdadeiros)
MEDUIMTEXT (reserva espaço em bits na memória);
INT(entre -214783648 a 214783647); //mais comum
OBS: CHAR e VARCHAR aceitam numeros e caracteres especiais;

DELETANDO TABELA:
CREATE TABLE carro (modelo VARCHAR(15));
DROP TABLE carro;

INSERINDO DADOS:
INSERT INTO <tabela> (<colunas...>) VALUES(<valores...>)
INSERT INTO produtos(nome, sku, informacoes) VALUES ("Playstation 5", "PS5XY", "É um videogame de última geração")

CREATE TABLE servidores (nome VARCHAR(100), espaco_disco INT(10), ligado BOOL);
INSERT INTO servidores (nome, espaco_disco, ligado) VALUES("Servidor 3", 12683648, 1);
INSERT INTO servidores (nome, espaco_disco, ligado) VALUES("Servidor 4", 10384458, 0);
SELECT * from servidores;

TIPO DATE/DATA:
DATE (YYYY-MM-DD);
DATETIME (YYYY-MM-DD hh:mm:ss);
TIMESTAMP - aceita uma data no formato DATETIME, entre 1970-2038
OBS: as datas são inseridas entre aspas;

CREATE TABLE aniversario (nome VARCHAR(100), data_nascimento DATE);
INSERT INTO aniversario(nome, data_nascimento) VALUES("Lucas", "2002-08-19");
SELECT * FROM aniversario;

ALTERAÇÃO DE TABELAS:
- ADIÇÃO DE COLUNAS:
ALTER TABLE <tabela> ADD COLUMN <nome> <tipo>;

CREATE TABLE funcionarios (nome VARCHAR(100));
ALTER TABLE funcionarios ADD COLUMN profissao VARCHAR(100);
INSERT INTO funcionarios(nome,profissao) VALUES ("Lucas", "Dev");
SELECT * FROM funcionarios;

- REMOÇÃO DE COLUNAS:
ALTER TABLE <tabela> DROP COLUMN <nome>;

ALTER TABLE funcionarios drop COLUMN profissao
SELECT * FROM funcionarios;

- MODIFICAÇÃO DE COLUNAS:
ALTER TABLE <tabela> MODIFY COLUMN <coluna> <tipo>;

ALTER TABLE funcionarios ADD COLUMN data_nascimento VARCHAR(100);
ALTER TABLE funcionarios MODIFY COLUMN data_nascimento Date;

NOT NULL
CREATE TABLE pessoas(nome VARCHAR(100) NOT NULL); (valor nome n pode ser NULL)

UNIQUE (garante q todos os dados terão valores diferentes - muito usado em email)
ALTER Table pessoas ADD COLUMN email VARCHAR(255) UNIQUE;

CHAVE PRIMÁRIA - PRIMARY KEY
(ID da tabela, único e n pode ser nulo)

CREATE TABLE produtos(
    id INT NOT NULL,
    nome VARCHAR(255),
    PRIMARY KEY(id)
);

UPDATE produtos SET sku = "123456" WHERE id = 2; (muda o sku do produto com id = 2)

AUTO INCREMENT (1,2,3... n-1)

CREATE TABLE frutas(
    id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nome VARCHAR(100),
    PRIMARY KEY(id)
);

INSERT INTO frutas (nome) VALUES ("Mamão"); (n precisa informar/delimitar o id)

CHAVE ESTRANGEIRA - FOREIGN KEY 

CREATE TABLE pessoas(
    id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nome VARCHAR(100) NOT NULL,
    idade INT
);

CREATE TABLE enderecos(
    id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    rua VARCHAR(100),
    numero VARCHAR(10),
    pessoas_id INT NOT NULL,
    FOREIGN KEY (pessoas_id) REFERENCES pessoas(id)
);

INSERT INTO pessoas (nome, idade) VALUES ("Matheus", 30) (Matheus é criado com o id = 1)
INSERT INTO enderecos (rua, numero, pessoa_id) VALUES("Rua teste", "123", 1) (anexa o endereço com o Matheus, id = 1)

INDEX - ÍNDICE => Otimiza a busca

===================================

            CONSULTA

===================================

SELECT * FROM pessoas; (PEGA TUDO)
SELECT nome,rg FROM pessoas; (PEGA ŚO NOME E RG)

INSERT INTO pessoas(nome,rg,cpf,limite) VALUES ("Joaquim", "1231423", "5477586", 99999) = INSERT INTO pessoas VALUES ("Joaquim", "1231423", "5477586", 99999);

SELECT * FROM pessoas WHERE nome = 'Pedro';
SELECT * FROM pessoas WHERE salario <= 6500; (condicionais - <=, >=, >, <)

SELECT DISTINCT <coluna> FROM <tabela> (retorna os diferentes dados que uma coluna pode ter)
SELECT DISTINCT title FROM titles (retorna todos os titulos diferentes, evita repetição)

OR, AND, NOT:
WHERE id > 10 AND salario > 5000;
WHERE cargo = 'Vendedor' || cargo = 'Programador';
WHERE NOT title = 'Staff' AND NOT title = 'Engineer';

UPDATE: 
UPDATE <tabela> set <coluna> = <novoValor> WHERE <colunaChavePrimaria> = <valor>
UPDATE pessoas SET limite = 800000, rg = '324535' WHERE nome = 'Roberta';

DELETE:
DELETE FROM <tabela> WHERE <condicao>
DELETE FROM pessoas WHERE nome = "Joaquim";
DELETE FROM pessoas WHERE limite > 2000; (deleta os q tem limite maior q 2000)

ORDER BY
SELECT * FROM salaries ORDER BY salary (Ascendente)
SELECT * FROM salaries ORDER BY salary DESC (Descendente)

LIMIT
SELECT * FROM salaries ORDER BY salary DESC LIMIT 10; (mostra os 10 maiores salarios)
SELECT * FROM salaries LIMIT 10; (limita a consulta para apenas 10 dados/linhas)

MIN/MAX
SELECT MIN(<coluna>) FROM <tabela>;
SELECT MIN(salary) AS menor_salario FROM salaries; (retorna só o menor salario)

SELECT MAX(<coluna>) FROM <tabela
SELECT MAX(salary) AS maior_salario FROM salaries;

COUNT
SELECT COUNT (*) FROM salaries WHERE salary > 10000; (retorna quantos salarios são maiores q 10000)

AVERAGE (AVG)
SELECT AVG(salary) FROM salaries (média de salários);

SOMA (SUM)
SELECT SUM(salary) FROM salaries (retorna a soma de todos os salários)  

LIKE "coringa"
SELECT * FROM employees WHERE first_name LIKE "%ber%; (procura os funcionarios q o primeiro nome tem "ber")
SELECT * FROM employees WHERE first_name LIKE "ber%; (procura apenas os q COMEÇAM com "ber")

IN (busca por um conjunto de valores)
SELECT * FROM dept_emp WHERE dept_no IN('d001', 'd004', 'd007'); (retorna tudo entre os departamentos d001, d004 e d007)
SELECT * FROM departments WHERE dept_name IN('Development', 'Marketing');

BETWEEN
SELECT * FROM dept_emp WHERE dept_no BETWEEN 'd001' AND 'd008'; (retorna os departamentos entre d001 - d008)

AS "como"
SELECT * AS Lucas_salario FROM salaries WHERE id = 7;

JOIN:

INNER JOIN (tem nas duas tabelas):
(junta o num do empregado da tabela employees e salaries)
SELECT employees.first_name, employees.last_name, salaries.salary
FROM employees
INNER JOIN salaries
ON employees.emp_no = salaries.emp_no
WHERE salaries.salary >= 12000
ORDER BY salaries.salary DESC;

LEFT JOIN: (TABELA DA ESQUERDA TEM DADOS EM EXCESSO,trás os dados q n apareceriam no INNER JOIN mas aparecem no LEFT JOIN)

SELECT pessoas.nome, enderecos.rua
FROM pessoas
LEFT JOIN enderecos
ON pessoas.id = enderecos.pessoas_id;

RIGHT JOIN: (TABELA DA DIREITA TEM DADOS EM EXCESSO, trás os dados q n apareceriam no INNER JOIN mas aparecem no RIGHT JOIN)

SELECT enderecos.rua, pessoas.nome
FROM endereco
RIGHT JOIN pessoas
ON pessoas.id = enderecos.pessoas_id;

JOIN JOIN
SELECT employees.first_name, salaries.salary, titles.title
FROM employees
INNER JOIN salaries
ON employees.emp_no = salaries.emp_no
INNER JOIN titles
ON employees.emp_no = titles.emp_no
WHERE salaries.salary > 125000;